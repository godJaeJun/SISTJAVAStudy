/*==========================================================
			■■■ 실행 흐름의 컨트롤 (제어문) ■■■
				   - 반복문 (for문) 실습
				      - 별찍기 실습 
==========================================================*/
// ○과제
// 다음과 같은 내용이 출력될 수 있도록
// 반복문의 중첩 구문을 작성하여 프로그램을 구현한다.
/*
    *
   ***
  *****
 *******
*********
*/
public class Test061
{
	public static void main(String[] args)
	{
		for(int i=0;i<5;i++){			// 출력결과의 줄수가 총 5줄이기 때문에 0~4까지 반복한다.
			for(int j=4-i;j>0;j--){		// 안에서는 두가지의 반복문이 실행되는데 첫번째 반복문은 j의 시작점이 4-i로 처음은 4 그다음은 3 그다음은 2 그다음은 1
				System.out.print(" ");  // 순으로 감소하게 한다. 이것은 앞에 부분의 공백을 처리해 주는 부분으로 한바퀴 돌수록 공백이 줄기 때문에 이렇게 처리해준다.
			}							
			for(int j=0;j<2*i+1;j++){	// 이것은 별을 찍어주는 공백을 찍어주는 for문뒤에 시작해준다. 2*i+1은 즉 처음에는 i가 0이므로 결과가 1이나온다 맨위의 꼭짓점
				System.out.print("*");  // *을 찍어주는 것이다 두번째 바퀴에는 3개 다음은 5개 즉 별의 개수만큼 반복한다는 뜻이다.
			}
			System.out.println();		// 한줄을 찍어주고 개행을 처리한다.
		}

		for(int i=0;i<5;i++){
			for(int j=0;j<(4-i);j++){
				System.out.print(" ");
			}
			for(int j=0;j<2*i+1;j++)
			{
				System.out.print("*");
			}
			System.out.println();
		}
		//while로 짠 별찍기
		/*
		int k=0, l=0;					// 루프 변수의 초기화를 진행한다.

		while(k<5){						// 총 5줄을 반복할것이기 때문에 k를 0부터 4까지 반복시켜준다.
			l= 4-k;						// l의 초기 값 설정 4-k는 첫번째 반복문에 들어갈 것으로 공백을 찍어주기 위에서 사용하는 수식이다.
			while(l>0)					// l이 0보다 클때 공백 반복문을 실행한다.
			{
				System.out.print(" ");	// 공백 출력
				l--;					// 출력문이 끝날때마다 l을 1씩 감소한다.
			}
			l=0;						// 다음 반복문을 위한 l변수 초기화
			while(l<2*k+1)				// 이번 반복문은 별을 찍기 위한 반복문으로 l이 2*k+1보다 작을 때 반복을 진행하도록 한다.
			{
				System.out.print("*");	// 만족할 경우 별을 찍어준다.
				l++;					// l을 증가시킨다. 즉 이 반복문에서 도는 횟수는 각 줄의 별의 개수만큼 돈다.
			}
			System.out.println();		// 별을 찍었으면 개행시켜준다.
			k++;
		}
		*/
	}
}
//실행 결과
/*
    *
   ***
  *****
 *******
*********
계속하려면 아무 키나 누르십시오 . . .
*/             